#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const { createServer } = require("http");
const { Server } = require("socket.io");
const Chat = require("../models/chat");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

//Create HTTPS server... that isn't needed when deploying to heroku, will remove later.
// const secureServer = https.createServer(app);

// secureServer.listen(app.get("secPort"), () => {
//     console.log("server listening on port", app.get("secPort"));
// });
// secureServer.on("error", onError);
// secureServer.on("listening", onListening);

/**
 * Create HTTP server.
 */

const server = createServer(app);
const io = new Server(server);

//Creates a new websocket and assigns ID to the client
io.on("connection", (socket) => {
    console.log(`connected with ${socket.id}`);

    //Receives message from client
    socket.on("newMessage", (data) => {
        console.log("received newMessage");
        console.log(`${data.username}, ${data.msg}`);

        const newChatMessage = new Chat({
            username: data.username,
            message: data.msg,
        });

        newChatMessage.save((err, savedMessage) => {
            if (err) {
                console.error(err);
            } else {
                console.log(`Message saved with ID: ${savedMessage._id}`);
                io.emit("sendMessage", savedMessage);
            }
        });
        //Broadcasts message to all clients
    });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
